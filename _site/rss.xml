<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>Home</title>
        <description>Home - Nick Confrey</description>
        <link>http://nconfrey.github.io</link>
        <atom:link href="http://nconfrey.github.io/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Thu, 03 Sep 2015 15:49:12 -0400</lastBuildDate>
        <pubDate>Thu, 03 Sep 2015 15:49:12 -0400</pubDate>
        <ttl>60</ttl>


        <item>
                <title>Google Summer Of Code Week 9 Checkin</title>
                <description>&lt;p&gt;This is my last official status update about Google Summer of Code – AND I MADE IT! Processing now has a library that can stream video and audio of any different formats to anything that can receive a gstreamer pipeline (like terminals, commandlines, other Processing Sketches). I’m so happy that I was finally able to complete the project I set out for myself. During this past week with help from Andres and another GSoC student Gottfried Haider, I was able to jump the final hurdles in developing my library.&lt;/p&gt;

&lt;p&gt;Things I’ve been able to accomplish this summer (and things that I think will be useful to the Processing community):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linking GStreamer 1.0 to Processing. The video library will no longer be stuck using Java bindings developed for GStreamer 0.10. Andres is interested in rolling this project into the next core release version of the processing video library.&lt;/li&gt;
  &lt;li&gt;Proven JNI access to C libraries usable in Processing. This method of using JNI to code with C libraries in Java seems easy enough and explainable. I can use my video streaming library as an example of a successful C-&amp;gt;JNI-&amp;gt;Java-&amp;gt;Processing project.&lt;/li&gt;
  &lt;li&gt;Video and Audio streaming library. If anyone wants to stream video from one computer to another, Processing is now a viable choice.&lt;/li&gt;
  &lt;li&gt;Access to GStreamer pipeline launch utility. Using my library, users can run GStreamer pipeline strings which exposes all the power of GStreamer, from audio analysis to ripping CDs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I still have things I want to do in the upcoming weeks and will continue work, but in terms of GSoC, I think I was successful!&lt;/p&gt;

&lt;p&gt;You can read more specifics on what I’ve been able to accomplish on the README I plan to attach with my code sample when I submit to Google.&lt;/p&gt;
</description>
                <link>http://nconfrey.github.io/gsoc/2015/08/21/Google-Summer-of-Code-Week-9-Checkin</link>
                <guid>http://nconfrey.github.io/gsoc/2015/08/21/Google-Summer-of-Code-Week-9-Checkin</guid>
                <pubDate>Fri, 21 Aug 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>Google Summer Of Code Week 8 Checkin</title>
                <description>&lt;p&gt;Onto the progress report: This past week I was able to get &lt;a href=&quot;https://github.com/nconfrey/GSoC/blob/master/videoStreaming/videoStreaming/src/processing/streaming/Streaming.java#L258&quot;&gt;Audio streaming&lt;/a&gt; to work over UDP using GStreamer 1.0! Thanks to Andres Colubri and a sample library he wrote in C/JNI, I was able to link Processing with GStreamer 1.0 using JNI, opening up many new possibilities for Processing and my own video library. We now have access to the &lt;code&gt;gst_parse_launch()&lt;/code&gt; function in GStreamer, which takes a pipeline string and parses it out into a functioning pipeline. Advanced users of Processing will now be able to take advantage of everything in the latest version of GStreamer.&lt;/p&gt;

&lt;p&gt;I’ve then used this functionality to finally be able to build audio streaming from one Processing sketch to another. The nice thing about finally being built in to GStreamer is the wealth of options for decoding different kinds of files. I can use a &lt;code&gt;decodebin&lt;/code&gt; to work with many different kinds of audio files before sending them out over UDP.&lt;/p&gt;

&lt;p&gt;I’m very excited but there are a couple things that need to get tightened up still. First, I need to thread the pipeline implementation so the sketch can do other things at the same time as sending audio. Second, and perhaps most importantly, I need to work on portability and testing. Given how much of a nightmare developing on Windows was, I hope using what I have now won’t be too difficult to make a version that also runs on Windows. Lastly, there is documentation. I’ve already written very simple tutorial example sketches that just send a song back and forth, but I’d like to develop a more sophisticated demo.&lt;/p&gt;

&lt;p&gt;And, of course, there is also video streaming. The tricky part about video is that GStreamer uses its own window sinks, meaning that it will open a new window to display the video, rather than being contained in the Processing sketch window. Andres and Gottfried, another GSoC student, have already been trying to tackle this problem by using an appsink and appsrc pipeline elements to remove data from the pipeline. As soon as I further tighten up my audio streaming, I’m going to jump in with them and see if we can get videos to be displayed in the Processing window.&lt;/p&gt;

&lt;p&gt;Seems like my project is finally hitting its stride! I do hope that I will be able to continue working until I iron out the last details and create something that will really help the Processing community!&lt;/p&gt;
</description>
                <link>http://nconfrey.github.io/gsoc/2015/08/17/Google-Summer-of-Code-Week-8-Checkin</link>
                <guid>http://nconfrey.github.io/gsoc/2015/08/17/Google-Summer-of-Code-Week-8-Checkin</guid>
                <pubDate>Mon, 17 Aug 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>Google Summer Of Code Week 7 Checkin</title>
                <description>&lt;p&gt;Finished up with Week 7 and I hope to be making some serious progress.&lt;/p&gt;

&lt;p&gt;This week I’ve been developing on Linux, which was wonderful and has made everything move a lot more smoothly. The first half of the week I learned how to use JNI using some basic programs that just passed strings back and forth. After compiling and working with JNI, I felt confident enough to move forward with the project.&lt;/p&gt;

&lt;p&gt;The current plan is to do most of the heavy lifting with C, and work naively with GStreamer. That way it’ll be really easy to work with the pipeline elements if I need to change things to get the data into Processing. The java file will just be a wrapper around the C which will just call the method that I’ve already written in C. Starting this week, I’ve written both the C and the java wrapper, and the Makefile that compiles them both. However, I’m having troubles running the Java which is supposed to take a string on the command line and pass it to the C to make a pipeline for it. I’m getting &lt;code&gt;UnsatisfiedLinkError: no gstreamer-1.0 in java.library.path&lt;/code&gt; when I try to run the Java. The goal for this week is to overcome the link error. Then I’ll just need to make it into a library for Processing!&lt;/p&gt;

&lt;p&gt;I’m looking forward to a good week.&lt;/p&gt;
</description>
                <link>http://nconfrey.github.io/gsoc/2015/08/14/Google-Summer-of-Code-Week-7-Checkin</link>
                <guid>http://nconfrey.github.io/gsoc/2015/08/14/Google-Summer-of-Code-Week-7-Checkin</guid>
                <pubDate>Fri, 14 Aug 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>Google Summer Of Code Week 6 Checkin</title>
                <description>&lt;p&gt;Into week 7 now and last week I learned a very valuable lesson: Don’t develop on a Windows computer. With that in mind, I’ve dual-booted my machine into Ubuntu and will continue my development there. The story of last week were increasingly frustrating Windows-based errors.&lt;/p&gt;

&lt;p&gt;The problem I began with last week was an inability to use the UDPsink and src elements in the pipeline in the code I had written in C. It turns out that the source of that error was an outdated Windows network driver, which required a system update to fix. The system update took most of Monday to install and download, which meant I lost a day of productivity. At least that night, I ran my C code and it preformed as expected.&lt;/p&gt;

&lt;p&gt;However, when I woke up the next morning, the same code that ran fine the night before wasn’t working anymore. It would compile in GCC, but then immediately hang and crash without any output (even after doing print statement debugging). I was pretty mystified, and ran it under gdb and got “During startup program exited with code 0xc0000139.” This error code didn’t have much information out on the web, but I surmised it was because of being unable to find certain system files (dll’s) needed to compile. This was especially odd, since it compile fine the night before. I spent Tuesday and Wednesday trying to figure out what could have possibly changed. I did system restores, reinstallations of pretty much everything, and a complete revert of everything in git without luck. Wednesday night I figured out that it was an update from Visual Studio that modified the system path in such a way that the compiler was loading a different version of the C++ runtime executables. By changing the order of my path environment variable, I was finally able to get the code to compile as expected, after three days of fighting.&lt;/p&gt;

&lt;p&gt;This officially concluded step 1 of my project, and the next step is to work with JNI or JNA. In order to learn JNI, I was following the most basic hello world example tutorial online. Everything was going well until it was time to compile. JNI creates a new library that the Java code can link into and then use the native C functions. The problem was that I was using GCC in Cygwin, which is the Windows version of a Unix-like command line. Unbeknownst to me, whenever GCC compiled, it was dependent on the Cygwin dll’s. The first problem was that this obviously wasn’t ever going to be cross platform, but the second problem was that the library wouldn’t work at all outside of Cygwin. If you are curious, you can read more about my problem here as I described it on (stack overflow)[http://stackoverflow.com/questions/31751528/how-to-compile-with-mno-cygwin-or-without-including-cygwin-dlls-with-gcc-4] but the gist of it was that there used to be a simple solution by compiling under the –mno-cygwin flag, but it was depreciated in the newest version of Cygwin, leaving me without options.&lt;/p&gt;

&lt;p&gt;At this point, I was pretty fed up with fighting Windows and so I’ve decided to abandon ship and develop on Linux. Windows didn’t let me go easily and the conversion process took all of Friday and most of the weekend (problems with the Windows backup utility). However, I’m confident that things will be able to move a lot more smoothly now. Gstreamer was developed on Linux, so I think things will be a lot more compatible. Goals for this week are to finish the JNI/JNA conversion stuff and move into step 3, integration with processing. I will have to take some time and set up all my development tools again on the Linux partition, but I hope that can be accomplished in the rest of this afternoon.&lt;/p&gt;
</description>
                <link>http://nconfrey.github.io/gsoc/2015/08/07/Google-Summer-of-Code-Week-6-Checkin</link>
                <guid>http://nconfrey.github.io/gsoc/2015/08/07/Google-Summer-of-Code-Week-6-Checkin</guid>
                <pubDate>Fri, 07 Aug 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>Google Summer Of Code Week 5 Checkin</title>
                <description>&lt;p&gt;Moving into week 6 now, and after last week I have a new direction to move in.I have decided to move forward on option #1, working on GStreamer now so that it has the largest effect on Processing. I’ve never been one to shy away from a challenge, and the fact that this is definitely the more difficult route is not that much of a downside. Ideally this way I’ll be able to make a more lasting contribution to Processing in a way that I will be proud about my accomplishments this summer.&lt;/p&gt;

&lt;p&gt;I have identified three major sections for my project going forward and aim to space them out in the time I have left. First, I need to get GStreamer working in its native C to do what I want, namely use the UDP elements to transfer frames and audio. Second, I need to wrap the functions I’ve used in JNI, Java Native Interface, to be able to call the C functions from Java. Lastly, I need to build the Java into my Processing Library.&lt;/p&gt;

&lt;p&gt;Last week I struggled with step 1. What promised to be an easy endeavor was decidedly not. Given that GStreamer was written in C, I thought using the built-in functions would be straightforward. The first hurdle was compiling the tutorial code against the GStreamer libraries. I generally use GCC as my C compiler, but there was no obvious way to include the dependencies and header files the code needed. I spent an afternoon hunting through the GStreamer file hierarchy, and then subsequently having issues with the Windows Installer utility to install the files I needed. I learned a lot more about GCC and including files, directories and library files. Finally, I got the sample tutorial to compile.&lt;/p&gt;

&lt;p&gt;However, that tutorial was written for GStreamer .10 (the very version I am trying to transition away from). I thought compiling against version 1.0 would be as simple as switching the library files in my Makefile, but unfortunately ran into problems here as well. After much head scratching and lots of failed attempts, I used a dependency walker to look at the executable I was compiling and found out that GCC has erroneously added a x86 version of the C++ runtime library rather than the x86_64 version which caused my program to die without any errors. I backtracked against my system environment variables and finally fixed the problem, allowing the version 1.0 to compile and run my sample program!&lt;/p&gt;

&lt;p&gt;However, even using 1.0 and written in C I can’t send packets over the network. I’m using the launch utility which promised to be the same as the command line interface (which I did get to send packets over the network). After I send this message, I’ll go back to trying to figure out why the pipeline fails without error and doesn’t actually send the UDP packets.&lt;/p&gt;

&lt;p&gt;It has definitely been more on-my-feet troubleshooting than actually writing code. I’m heartened by the fact that this is probably really good experience for other real-life developing projects, but I look forward to the next phase of this project where I get to write more code and don’t need to battle so much with Windows or compatibility issues. I have a clear step by step guide of where I’m going now, I just need to push through and keep battling these issues!&lt;/p&gt;
</description>
                <link>http://nconfrey.github.io/gsoc/2015/07/31/Google-Summer-of-Code-Week-5-Checkin</link>
                <guid>http://nconfrey.github.io/gsoc/2015/07/31/Google-Summer-of-Code-Week-5-Checkin</guid>
                <pubDate>Fri, 31 Jul 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>Google Summer Of Code Week 4 Checkin</title>
                <description>&lt;p&gt;Just finished up week 4, onto week 5. I’ve actually hit quite the wall and inflexion point in this past week, and I need some guidance on the best way to proceed.&lt;/p&gt;

&lt;p&gt;I’ve been in back and forth contact with Andres Colubri about GStreamer, and he’s be extremely helpful in pushing me in the right direction with regards to GStreamer. I spent the first half of week 4 still attempting to get GStreamer to work the way I wanted it to. The idea was that GStreamer would handle the audio and video encoding and compression and leave me with the task of figuring out network programming. GStreamer works in a pipeline fashion, with “elements” being placed one after another in a line to transfer video data. I needed the udpsink element to work, which promised to take the bytes in the pipeline and send them out into the network. On the client side, they would have a udpsrc which would take bytes from the network and put them into the pipeline. But after several days still working at this problem, the udpsink element just would not put bytes into the network (verified by working with Wireshark, a utility to sniff network packets).&lt;/p&gt;

&lt;p&gt;Taking a step back, I installed straight GStreamer on the command line which uses the official version, rather than the java bindings version that we are forced to use for Processing (because GStreamer is written in C, so there need to be Java bindings to interact with Processing code). To my surprise, I finally did get the udpsink / udpsrc to work and send video and audio data across the network. The problem was that the Java bindings used in Processing are locked into version .10 of GStreamer, which is end-of-life and not maintained. The version I was able to work was version 1.5, which cannot be used in Java or Processing.&lt;/p&gt;

&lt;p&gt;So now I have a problem ahead of me. In order to use modern GStreamer with Processing (and in order to make my udp connections work), we need to rewrite the Java bindings to support version 1.x of GStreamer. Fortunately, in Google Summer of Code 2014, there was a student who took on this problem and nearly solved it by writing a parser to automatically generate Java files from the GStreamer source code. Unfortunately, he left it uncompleted and disappeared off the face of the planet. In order to make his solution work, I need to re-trace his steps, figure out how his parser works, and figure out what still needs to be done. Andres was the student’s mentor for this project and he says there is still “significant work to be done” in order to get the parser to produce java files that will work reliably. Andres wants refactoring GStreamer to Java to be the next phase of my project, because it will help support the Processing video library as well as my networking library.&lt;/p&gt;

&lt;p&gt;However, this would be a significant change to my project. I would not be doing networking programming anymore, but rather low level systems programing as I attempted to change C files and plugins to Java compatible ones. At the end of the day, I want to make a networking library as my contribution to Processing. With this in mind, I spent Thursday and Friday working to tighten up and extend the work I did at the very beginning of GSoC, which was manually creating datagram packets to send video frames based on your UDP tutorial. I used this method to transmit audio, and it sounded like driving down the highway with the windows open and a faint bit of a song on the radio. This reminds me of the difficulty of compressing and sending audio, all things that GStreamer would do for me, and I would have to reinvent the wheel a bit to get it into my library.&lt;/p&gt;

&lt;p&gt;I can either choose to fix the GStreamer bindings with the hope that it will eventually benefit my networking library, or forgo work on GStreamer and do the networking manually, knowing that it won’t be as robust or well implemented as GStreamer. I’m looking for advice on which path to choose, because in the time I have I can’t do both. Working on the GStreamer risks not actually having a network library at the end of the summer, and working on the networking library risks not having a really good implementation without a builtin video library.&lt;/p&gt;
</description>
                <link>http://nconfrey.github.io/gsoc/2015/07/24/Google-Summer-of-Code-Week-4-Checkin</link>
                <guid>http://nconfrey.github.io/gsoc/2015/07/24/Google-Summer-of-Code-Week-4-Checkin</guid>
                <pubDate>Fri, 24 Jul 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>Google Summer Of Code Week 3 Checkin</title>
                <description>&lt;p&gt;Onto week 3. This week was a slow learning week, so I wasn’t able to write as much code as the previous weeks. That being said, let’s get into it.&lt;/p&gt;

&lt;p&gt;Monday and Tuesday were devoted to learning about the Gstreamer framework and understanding how it worked. Wednesday I finally linked in GStreamer into Processing, and then made some &lt;a href=&quot;https://github.com/nconfrey/GSoC/blob/master/videoStreaming%20.10/videoStreaming/src/template/library/VideoBroadcaster.java#L93&quot;&gt;sample pipelines&lt;/a&gt; that played audio or displayed video. The goal is to use the GStreamer framework to buffer and manage the video and audio streams, and then put a &lt;code&gt;udpsink&lt;/code&gt; at the end of it that will send off the stream as udp packets. I’m still struggling with integrating the udp sink.&lt;/p&gt;

&lt;p&gt;At the end of this week, I’m much more comfortable with GStreamer but not quite where I want to be with written code. I’ll keep at it.&lt;/p&gt;
</description>
                <link>http://nconfrey.github.io/gsoc/2015/07/16/Google-Summer-of-Code-Week-3-Checkin</link>
                <guid>http://nconfrey.github.io/gsoc/2015/07/16/Google-Summer-of-Code-Week-3-Checkin</guid>
                <pubDate>Thu, 16 Jul 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>Google Summer Of Code Week 2 Checkin</title>
                <description>&lt;p&gt;Its been a pretty fun week coding over here. This is the first week I struck out onto my own to write my own network streaming Processing library over UDP. At the end of the week, I was able to create a library that allows Processing users to stream webcam and sketch images over UDP.&lt;/p&gt;

&lt;p&gt;The first half of the week was devoted to setting up the development environment and getting the structure of the library in order to really start work on the video streaming library. Of course, as any “simple” thing is in computing, it took way longer than expected as I ran into many problems. First of all, the buildpaths in the sample processing library template are all for OSX, and so it took me forever to figure out that all the slashes / need to be \ on windows (because one \ is an escape character, so to have an actual slash you need two of them). I also ran into problems finding &lt;code&gt;tools.jar&lt;/code&gt; as part of the JDK and setting up eclipse with the right versions of Java. Finally the last problem was with git submodules, as I forked the processing library template into my working directory so git wouldn’t track any new changes inside those files. These problems consumed my Monday and Tuesday, but then I was able to move onto the more exciting things.&lt;/p&gt;

&lt;p&gt;Starting on Tuesday afternoon, I used a &lt;a href=&quot;http://shiffman.net/2010/11/13/streaming-video-with-udp-in-processing/&quot;&gt;UDP tutorial&lt;/a&gt; to build a simple webcam streaming example program. All the logic of the networking pieces (like setting up datagram ports, compressing the image, creating packets) is all done in my library now, so sending a frame is as simple as calling &lt;code&gt;broadcast(c)&lt;/code&gt;, where c is a &lt;code&gt;Capture&lt;/code&gt; object (although it could be any &lt;code&gt;PImage&lt;/code&gt;). The example sketches I wrote are super super simple now, and I’m proud of how little code a Processing user will have to write to stream webcam feeds. The library code is structured into two files, &lt;code&gt;videoBroadcaster.java&lt;/code&gt; and &lt;code&gt;videoReceiver.java&lt;/code&gt;, which act as a server/client.&lt;/p&gt;

&lt;p&gt;I then built on top of the &lt;code&gt;broadcast()&lt;/code&gt; function to be able to share any sketch’s screen. By simply calling &lt;code&gt;screenBroadcast()&lt;/code&gt; with no arguments in the draw function, whatever is currently displayed on one sketch’s screen will be streamed to the client sketch. This makes it trivial to share complex designs across different Processing sketches.&lt;/p&gt;

&lt;p&gt;Finally, I took another look at what I built last week and modified the &lt;code&gt;serverEvent&lt;/code&gt; function so that it won’t conflict/break other example code. Now there is a method &lt;code&gt;serverDisconnectEvent(Server, Client)&lt;/code&gt; that is fired whenever a client disconnects. This is important now that I can keep track of individual clients, because then I can find out which exact client left. I think the code is robust enough to potentially be merged into the actual core library.&lt;/p&gt;

&lt;p&gt;There are obviously many next steps that can be done. First, these methods are all blocking which is not ideal. Incorporating threads is an obvious next step. I also want to stream audio, because I can’t find a library that will do it. I’m going to take some mentor advice and look into &lt;a href=&quot;http://gstreamer.freedesktop.org/&quot;&gt;GStreamer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That sums up the week! Example code for my new Processing functions can be found &lt;a href=&quot;https://github.com/nconfrey/GSoC/tree/master/coreExamples&quot;&gt;here&lt;/a&gt;, the sending and receiving classes are &lt;a href=&quot;https://github.com/nconfrey/GSoC/blob/master/videoStreaming/videoStreaming/src/processing/streaming/VideoBroadcaster.java&quot;&gt;here&lt;/a&gt;. Drop a comment if the UDP streaming either worked really well for you or broke–either way, it’s useful information!&lt;/p&gt;
</description>
                <link>http://nconfrey.github.io/gsoc/2015/07/09/Google-Summer-of-Code-Week-2-Checkin</link>
                <guid>http://nconfrey.github.io/gsoc/2015/07/09/Google-Summer-of-Code-Week-2-Checkin</guid>
                <pubDate>Thu, 09 Jul 2015 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation.
What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary
&lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website.
The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;
</description>
                <link>http://nconfrey.github.io/lessons/2011/12/29/jekyll-introduction</link>
                <guid>http://nconfrey.github.io/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>Thu, 29 Dec 2011 00:00:00 -0500</pubDate>
        </item>


</channel>
</rss>
